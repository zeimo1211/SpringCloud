<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.springbootdemo.mapper.RoomMapper">
    <select id="getAvailableRooms" resultType="com.example.springbootdemo.bean.RoomBean">
        SELECT * FROM rooms WHERE Status = 'available'
    </select>
    <select id="callBookRoom" statementType="CALLABLE">
        CALL BookRoom(
                #{p_Name, jdbcType=VARCHAR, mode=IN},
                #{p_Email, jdbcType=VARCHAR, mode=IN},
                #{p_Phone, jdbcType=VARCHAR, mode=IN},
                #{p_RoomNumber, jdbcType=VARCHAR, mode=IN},
                #{p_CheckInDate, jdbcType=DATE, mode=IN},
                #{p_CheckOutDate, jdbcType=DATE, mode=IN},
                #{p_Amount, jdbcType=DECIMAL, mode=IN},
                #{p_BookingID, jdbcType=INTEGER, mode=OUT},
                #{p_PaymentStatus, jdbcType=VARCHAR, mode=OUT}
            )
    </select>
    <update id="cancelBooking">
        CALL CancelBooking(#{p_BookingID, jdbcType=INTEGER})
    </update>
    <select id="isBookingExistsAndBelongsToUser" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM Bookings
        WHERE BookingID = #{bookingId} AND CustomerID = #{userId}
    </select>
    <select id="getBookingsByUserId" resultType="com.example.springbootdemo.bean.RoomBean">
        SELECT Rooms.*, Bookings.BookingID, Bookings.CustomerID as userId, Bookings.CheckInDate, Bookings.CheckOutDate
        FROM Bookings
                 JOIN Rooms ON Bookings.RoomID = Rooms.RoomID
        WHERE CustomerID = #{userId} AND BookingStatus = 'confirmed'
    </select>
    <select id="getAllRooms" resultType="com.example.springbootdemo.bean.RoomBean">
        SELECT r.RoomID, r.RoomNumber, r.RoomType, r.Price, r.Status,
               b.BookingID, b.CheckInDate, b.CheckOutDate, b.BookingStatus,
               c.Name as customerName, p.PaymentStatus, p.PaymentDate
        FROM Rooms r
                 LEFT JOIN Bookings b ON r.RoomID = b.RoomID
                 LEFT JOIN Customers c ON b.CustomerID = c.CustomerID
                 LEFT JOIN Payments p ON b.BookingID = p.BookingID
        ORDER BY r.RoomID
    </select>
    <select id="calculateTotalCost" resultType="java.math.BigDecimal" statementType="CALLABLE">
        { CALL CalculateTotalCost(#{customerId, jdbcType=INTEGER}) }
    </select>
    <select id="calculateTotalCostAndUpdatePayments" statementType="CALLABLE">
        { CALL CalculateTotalCost(#{customerId, jdbcType=INTEGER}) }
    </select>
    <update id="bookRoomByTypeAndCustomer">
        CALL bookroom_by_customerID_and_Roomtype(
                #{params.customerId, jdbcType=INTEGER},
                #{params.roomType, jdbcType=VARCHAR},
                #{params.checkInDate, jdbcType=DATE},
                #{params.checkOutDate, jdbcType=DATE},
                #{params.amount, jdbcType=DECIMAL}
            )
    </update>
    <select id="getAvailableRoomTypesInRange" resultType="com.example.springbootdemo.bean.RoomTypeCount">
        SELECT RoomType, COUNT(*) AS count, AVG(Price) AS price
        FROM Rooms
        WHERE Status = 'available'
          AND RoomID NOT IN (
            SELECT RoomID
            FROM Bookings
            WHERE (CheckInDate &lt;= #{endDate} AND CheckOutDate &gt;= #{startDate})
        )
        GROUP BY RoomType
    </select>
</mapper>